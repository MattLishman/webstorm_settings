<templateSet group="Custom Angular">
  <template name="ngc" value="import {module as $moduleName$} from './$modulePath$';&#10;&#10;export class $controller$ {&#10;&#10;    static $inject = ['$dependency$'];&#10;&#10;    constructor(private $dependency$) {&#10;        $END$&#10;    }&#10;}&#10;&#10;$moduleName$.controller('$controller$', $controller$);" description="Angular controller" toReformat="true" toShortenFQNames="true">
    <variable name="modulePath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ngs" value="import {module as $moduleName$} from './$modulePath$';&#10;&#10;export class $service$ {&#10;&#10;    static $inject = ['$inject$'];&#10;&#10;    constructor (private $inject$) {&#10;        $END$&#10;    }&#10;}&#10;&#10;$moduleName$.service('$service$', $service$);&#10;" description="Angular service" toReformat="true" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="modulePath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="service" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="inject" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name=".then" value=".then(($return$) =&gt; {&#10;    $END$&#10;})" description="Expand a .then()" toReformat="true" toShortenFQNames="true">
    <variable name="return" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="apply" value="$rootScope.$apply();" description="$rootScope.$apply();" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ngd" value="import {module as $moduleName$} from '$modulePath$';&#10;&#10;function $function$() {&#10;    return {&#10;        restrict: 'E',&#10;        scope: {},&#10;        templateUrl: '/app/$template$',&#10;        bindToController: {&#10;            $bind$: '$to$'&#10;        },&#10;        controller: $controller$,&#10;        controllerAs: 'vm'&#10;    };&#10;}&#10;&#10;$moduleName$.directive('$name$', $function$);&#10;" description="Amgular directive" toReformat="true" toShortenFQNames="true">
    <variable name="modulePath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="template" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="bind" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="to" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ngm" value="const module: ng.IModule  = angular.module('$module$', []);&#10;&#10;export {module};&#10;" description="Angular module" toReformat="true" toShortenFQNames="true">
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngr" value="import {module as $moduleName$} from './$module$';&#10;import {$controller$} from './$controllerPath$.controller';&#10;&#10;let states = [&#10;    {&#10;        state: '$stateName$',&#10;        config: {&#10;            url: '/$url$',&#10;            controller: '$controller$Ctrl',&#10;            controllerAs: 'vm',&#10;            templateUrl: '/app/$template$.template.html',&#10;        },&#10;    },&#10;];&#10;&#10;$moduleName$.run(['routerHelper', (routerHelper) =&gt; {&#10;    routerHelper.configureStates(states);&#10;}]);&#10;" description="Angular router" toReformat="true" toShortenFQNames="true">
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="stateName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerPath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="template" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bpromise" value="let deferred = $q.defer();&#10;deferred.resolve($END$);&#10;return deferred.promise;" description="A blank promise the resolves" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ngcomp" value="import {module as $moduleName$} from '$modulePath$';&#10;import {$controller$} from '$controllerPath$' &#10;&#10;let $componentName$Component: ng.IComponentOptions = {&#10;    templateUrl: '$templateUrl$',&#10;    controller: $controller$,&#10;    controllerAs: 'vm',&#10;    bindings: {&#10;        $binding$: '=',&#10;    },&#10;};&#10;&#10;export {$componentName$};&#10;&#10;$moduleName$.component('snow$componentName$', $componentName$Component);" description="Angular component" toReformat="true" toShortenFQNames="true">
    <variable name="modulePath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerPath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="templateUrl" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="binding" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>