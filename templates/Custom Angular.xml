<templateSet group="Custom Angular">
  <template name="ngc" value="export class $controller$ {&#10;&#10;    static $inject = ['$dependency$'];&#10;&#10;    constructor(private $dependency$) {&#10;        $END$&#10;    }&#10;}" description="Angular controller" toReformat="true" toShortenFQNames="true">
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ngs" value="export class $service$ {&#10;&#10;    static $inject = ['$inject$'];&#10;&#10;    constructor (private $inject$) {&#10;        $END$&#10;    }&#10;}" description="Angular service" toReformat="true" toShortenFQNames="true">
    <variable name="service" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="inject" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name=".then" value=".then(($return$) =&gt; {&#10;    $END$&#10;})" description="Expand a .then()" toReformat="true" toShortenFQNames="true">
    <variable name="return" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="apply" value="$rootScope.$apply();" description="$rootScope.$apply();" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ngd" value="export function $function$() {&#10;    return {&#10;        restrict: 'E',&#10;        scope: {},&#10;        templateUrl: '/app/$template$',&#10;        bindToController: {&#10;            $bind$: '$to$'&#10;        },&#10;        controller: $controller$,&#10;        controllerAs: 'vm'&#10;    };&#10;}" description="Amgular directive" toReformat="true" toShortenFQNames="true">
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="template" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="bind" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="to" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ngm" value="const module: ng.IModule  = angular.module('$module$', []);&#10;&#10;export {module};&#10;" description="Angular module" toReformat="true" toShortenFQNames="true">
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngr" value="import {$controller$} from './$controllerPath$.controller';&#10;&#10;let states = [&#10;    {&#10;        state: '$stateName$',&#10;        config: {&#10;            url: '/$url$',&#10;            controller: '$controller$Ctrl',&#10;            controllerAs: 'vm',&#10;            templateUrl: '/app/$template$.template.html',&#10;        },&#10;    },&#10;];&#10;&#10;export {states};" description="Angular router" toReformat="true" toShortenFQNames="true">
    <variable name="stateName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerPath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="template" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bpromise" value="let deferred = $q.defer();&#10;deferred.resolve($END$);&#10;return deferred.promise;" description="A blank promise the resolves" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ngcomp" value="import {$controller$} from '$controllerPath$';&#10;&#10;let $componentName$Component: ng.IComponentOptions = {&#10;    templateUrl: '$templateUrl$',&#10;    controller: $controller$,&#10;    controllerAs: 'vm',&#10;    bindings: {&#10;        $binding$: '=',&#10;    },&#10;};&#10;&#10;export {$componentName$Component};&#10;" description="Angular component" toReformat="true" toShortenFQNames="true">
    <variable name="controllerPath" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="templateUrl" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="binding" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="unitcontroller" value="import {module as $moduleName$} from '$moduleLoacation$';&#10;import {$controllerName$} from '$controllerLocation$';&#10;&#10;describe('$controllerName$', () =&gt; {&#10;&#10;    // Injected globals&#10;    let $rootScope: ng.IRootScopeService,&#10;        $controller: ng.IControllerService,&#10;        $q: ng.IQService;&#10;&#10;    // Defaults&#10;    let $default$;&#10;&#10;    beforeEach(angular.mock.module($moduleName$.name));&#10;&#10;    // Globals and defaults&#10;    beforeEach(inject((_$rootScope_, _$controller_, _$q_) =&gt; {&#10;        $rootScope = _$rootScope_;&#10;        $controller = _$controller_;&#10;        $q = _$q_;&#10;&#10;        // Defaults&#10;        $default$ = $defaultValue$&#10;    }));&#10;&#10;    describe('When initialised', () =&gt; {&#10;        it('should $itShould$', () =&gt; {&#10;            $END$&#10;        });&#10;    });&#10;});&#10;" description="Unit test for a controller" toReformat="false" toShortenFQNames="true">
    <variable name="moduleLoacation" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerLocation" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="default" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="defaultValue" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="itShould" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="unitservice" value="import {module as $moduleName$} from '$moduleLocation$';&#10;import {$serviceName$} from '$serviceLocation$';&#10;&#10;describe('$serviceName$', () =&gt; {&#10;&#10;    let $serviceName$: $serviceName$;&#10;&#10;    // Dependencies&#10;    let $dependency$;&#10;&#10;    let $q: ng.IQService, $rootScope: ng.IRootScopeService;&#10;&#10;    beforeEach(angular.mock.module($moduleName$.name));&#10;&#10;    beforeEach(angular.mock.module(($provide) =&gt; {&#10;&#10;        $dependency$ = {$dep$};&#10;&#10;        $provide.value('$dependency$', $dependency$);&#10;    }));&#10;&#10;    beforeEach(inject(($injector, _$q_, _$rootScope_) =&gt; {&#10;        $serviceName$ = $injector.get('$serviceName$');&#10;        $q = _$q_;&#10;        $rootScope = _$rootScope_;&#10;    }));&#10;&#10;    describe('$method$', () =&gt; {&#10;        it('should $itShould$', () =&gt; {&#10;            $END$&#10;        });&#10;    });&#10;&#10;});&#10;" toReformat="true" toShortenFQNames="true">
    <variable name="moduleLocation" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceLocation" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dependency" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dep" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="itShould" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>